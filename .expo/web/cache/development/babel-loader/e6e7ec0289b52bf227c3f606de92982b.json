{"ast":null,"code":"import React from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\n\nvar FindNextJun = function FindNextJun(date) {\n  var dateToSec = date.getTime();\n  var junDateToSec = date.setMonth(5);\n  junDateToSec = date.setDate(1);\n\n  if (dateToSec - junDateToSec > 0) {\n    return new Date(365 * 24 * 60 * 60 * 1000 + junDateToSec);\n  } else {\n    return new Date(junDateToSec);\n  }\n};\n\nexport default function Charges(ListDesAppartements) {\n  var results = [];\n  var today = new Date();\n  today.setUTCHours(0, 0, 0, 0);\n  var NextJunFromToDayTimeStamp = FindNextJun(today).getTime();\n  var dayPrice = 4850 / 365;\n  Alert.alert(\"coucou\");\n}","map":{"version":3,"sources":["D:/dropshipping/mobile developpement/bentriaa/useFull/Charges.js"],"names":["React","FindNextJun","date","dateToSec","getTime","junDateToSec","setMonth","setDate","Date","Charges","ListDesAppartements","results","today","setUTCHours","NextJunFromToDayTimeStamp","dayPrice","Alert","alert"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAQ;AACpB,MAAIC,SAAS,GAAGD,IAAI,CAACE,OAAL,EAAhB;AACA,MAAIC,YAAY,GAAGH,IAAI,CAACI,QAAL,CAAc,CAAd,CAAnB;AACAD,EAAAA,YAAY,GAAGH,IAAI,CAACK,OAAL,CAAa,CAAb,CAAf;;AACA,MAAGJ,SAAS,GAACE,YAAV,GAAyB,CAA5B,EAA8B;AAC1B,WAAO,IAAIG,IAAJ,CAAS,MAAI,EAAJ,GAAO,EAAP,GAAU,EAAV,GAAa,IAAb,GAAkBH,YAA3B,CAAP;AACH,GAFD,MAEK;AACD,WAAO,IAAIG,IAAJ,CAASH,YAAT,CAAP;AACH;AACR,CATD;;AAWA,eAAe,SAASI,OAAT,CAAiBC,mBAAjB,EAAsC;AAGjD,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,KAAK,GAAG,IAAIJ,IAAJ,EAAZ;AACAI,EAAAA,KAAK,CAACC,WAAN,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B;AACA,MAAIC,yBAAyB,GAAGb,WAAW,CAACW,KAAD,CAAX,CAAmBR,OAAnB,EAAhC;AACA,MAAIW,QAAQ,GAAG,OAAK,GAApB;AA4BAC,EAAAA,KAAK,CAACC,KAAN,CAAY,QAAZ;AAGH","sourcesContent":["import React from 'react'\r\nimport { Alert } from 'react-native';\r\n\r\nconst FindNextJun = (date)=>{\r\n        let dateToSec = date.getTime()\r\n        let junDateToSec = date.setMonth(5)\r\n        junDateToSec = date.setDate(1)\r\n        if(dateToSec-junDateToSec > 0){\r\n            return(new Date(365*24*60*60*1000+junDateToSec))\r\n        }else{\r\n            return(new Date(junDateToSec))\r\n        }\r\n}\r\n\r\nexport default function Charges(ListDesAppartements) {\r\n    \r\n\r\n    let results = []\r\n    let today = new Date()\r\n    today.setUTCHours(0, 0, 0, 0);\r\n    let NextJunFromToDayTimeStamp = FindNextJun(today).getTime()\r\n    let dayPrice = 4850/365\r\n\r\n    // ListDesAppartements.map((appartment,i)=>{\r\n        \r\n    //     let app = {\r\n    //         titreFoncier : appartment.titreFoncier,\r\n    //         chargesListe : []\r\n    //     }\r\n    //     let ContractTimeStamp = appartment.DateDeSignatureDuContrat.toDate().getTime()\r\n    //     let ContractnextJuneTimeStamp = FindNextJun(appartment.DateDeSignatureDuContrat.toDate()).getTime()\r\n\r\n        \r\n        \r\n    //     do{\r\n    //         app[\"chargesListe\"].push({\r\n    //             days : Math.floor( (ContractnextJuneTimeStamp-ContractTimeStamp)/(1000*60*60*24) ),\r\n    //             charge : Math.floor( (ContractnextJuneTimeStamp-ContractTimeStamp)/(1000*60*60*24)*(4850/365) ),\r\n    //             saison : (new Date(ContractnextJuneTimeStamp-(1000*365*60*60*24))).getFullYear()+\"/\"+(new Date(ContractnextJuneTimeStamp)).getFullYear()\r\n    //         })\r\n    //         ContractTimeStamp = ContractnextJuneTimeStamp;\r\n    //         ContractnextJuneTimeStamp += 365*24*60*60*1000\r\n            \r\n    //     }while(ContractnextJuneTimeStamp < NextJunFromToDayTimeStamp)\r\n        \r\n        \r\n    //     results.push(app)\r\n    // })\r\n        \r\n    Alert.alert(\"coucou\")\r\n    // return(results)\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}