{"ast":null,"code":"var FindNextJun = function FindNextJun(date) {\n  var dateToSec = date.getTime();\n  var junDateToSec = date.setMonth(5);\n  junDateToSec = date.setDate(1);\n\n  if (dateToSec - junDateToSec > 0) {\n    return new Date(365 * 24 * 60 * 60 * 1000 + junDateToSec);\n  } else {\n    return new Date(junDateToSec);\n  }\n};\n\nvar AppCharges = function AppCharges(Appartement) {\n  var Total = 0;\n  var Charges = [];\n  var today = new Date();\n  today.setUTCHours(0, 0, 0, 0);\n  var NextJunFromToDayTimeStamp = FindNextJun(today).getTime();\n\n  if (typeof Appartement !== \"undefined\") {\n    var ContractTimeStamp = Appartement.DateDeSignatureDuContrat.toDate().getTime();\n    var ContractnextJuneTimeStamp = FindNextJun(Appartement.DateDeSignatureDuContrat.toDate()).getTime();\n\n    do {\n      Charges.push({\n        days: Math.floor((ContractnextJuneTimeStamp - ContractTimeStamp) / (1000 * 60 * 60 * 24)),\n        charge: Math.floor((ContractnextJuneTimeStamp - ContractTimeStamp) / (1000 * 60 * 60 * 24) * (4850 / 365)),\n        saison: new Date(ContractnextJuneTimeStamp - 1000 * 365 * 60 * 60 * 24).getFullYear() + \"/\" + new Date(ContractnextJuneTimeStamp).getFullYear(),\n        startingDay: JSON.stringify(new Date(ContractTimeStamp)).split('\"')[1].split('T')[0],\n        To: JSON.stringify(new Date(ContractnextJuneTimeStamp - 1000 * 60 * 60)).split('\"')[1].split('T')[0]\n      });\n      Total += Math.floor((ContractnextJuneTimeStamp - ContractTimeStamp) / (1000 * 60 * 60 * 24) * (4850 / 365));\n      ContractTimeStamp = ContractnextJuneTimeStamp;\n      ContractnextJuneTimeStamp += 365 * 24 * 60 * 60 * 1000;\n    } while (ContractnextJuneTimeStamp <= NextJunFromToDayTimeStamp);\n  }\n\n  return {\n    Total: Total,\n    Charges: Charges\n  };\n};\n\nvar AllCharges = function AllCharges(ListDesAppartements) {\n  var Appartments = [];\n  var Total = 0;\n  var today = new Date();\n  today.setUTCHours(0, 0, 0, 0);\n  var NextJunFromToDayTimeStamp = FindNextJun(today).getTime();\n\n  if (typeof ListDesAppartements !== \"undefined\") {\n    ListDesAppartements.map(function (appartment, i) {\n      var app = {\n        titreFoncier: appartment.titreFoncier,\n        Immeuble: appartment.Immeuble,\n        NAppartement: appartment.NAppartement,\n        ChargesList: [],\n        Total: 0\n      };\n      var ContractTimeStamp = appartment.DateDeSignatureDuContrat.toDate().getTime();\n      var ContractnextJuneTimeStamp = FindNextJun(appartment.DateDeSignatureDuContrat.toDate()).getTime();\n\n      do {\n        app[\"ChargesList\"].push({\n          days: Math.floor((ContractnextJuneTimeStamp - ContractTimeStamp) / (1000 * 60 * 60 * 24)),\n          charge: Math.floor((ContractnextJuneTimeStamp - ContractTimeStamp) / (1000 * 60 * 60 * 24) * (4850 / 365)),\n          saison: new Date(ContractnextJuneTimeStamp - 1000 * 365 * 60 * 60 * 24).getFullYear() + \"/\" + new Date(ContractnextJuneTimeStamp).getFullYear(),\n          startingDay: JSON.stringify(new Date(ContractTimeStamp)).split('\"')[1].split('T')[0],\n          To: JSON.stringify(new Date(ContractnextJuneTimeStamp - 1000 * 60 * 60)).split('\"')[1].split('T')[0]\n        });\n        app[\"Total\"] += Math.floor((ContractnextJuneTimeStamp - ContractTimeStamp) / (1000 * 60 * 60 * 24) * (4850 / 365));\n        Total += Math.floor((ContractnextJuneTimeStamp - ContractTimeStamp) / (1000 * 60 * 60 * 24) * (4850 / 365));\n        ContractTimeStamp = ContractnextJuneTimeStamp;\n        ContractnextJuneTimeStamp += 365 * 24 * 60 * 60 * 1000;\n      } while (ContractnextJuneTimeStamp <= NextJunFromToDayTimeStamp);\n\n      Appartments.push(app);\n    });\n  }\n\n  return {\n    Appartments: Appartments,\n    Total: Total\n  };\n};\n\nexport { AllCharges, AppCharges };","map":{"version":3,"sources":["D:/dropshipping/mobile developpement/bentriaa/useFull/Charges.js"],"names":["FindNextJun","date","dateToSec","getTime","junDateToSec","setMonth","setDate","Date","AppCharges","Appartement","Total","Charges","today","setUTCHours","NextJunFromToDayTimeStamp","ContractTimeStamp","DateDeSignatureDuContrat","toDate","ContractnextJuneTimeStamp","push","days","Math","floor","charge","saison","getFullYear","startingDay","JSON","stringify","split","To","AllCharges","ListDesAppartements","Appartments","map","appartment","i","app","titreFoncier","Immeuble","NAppartement","ChargesList"],"mappings":"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","sourcesContent":["\r\n\r\n\r\n\r\nconst FindNextJun = (date)=>{\r\n        let dateToSec = date.getTime()\r\n        let junDateToSec = date.setMonth(5)\r\n        junDateToSec = date.setDate(1)\r\n        if(dateToSec-junDateToSec > 0){\r\n            return(new Date(365*24*60*60*1000+junDateToSec))\r\n        }else{\r\n            return(new Date(junDateToSec))\r\n        }\r\n}\r\nconst AppCharges = (Appartement) => {\r\n    let Total = 0 ;\r\n    let Charges = [];\r\n    let today = new Date()\r\n    today.setUTCHours(0, 0, 0, 0);\r\n    let NextJunFromToDayTimeStamp = FindNextJun(today).getTime()\r\n    \r\n    if(typeof(Appartement) !== \"undefined\"){\r\n\r\n        let ContractTimeStamp = Appartement.DateDeSignatureDuContrat.toDate().getTime()\r\n        let ContractnextJuneTimeStamp = FindNextJun(Appartement.DateDeSignatureDuContrat.toDate()).getTime()\r\n        do{\r\n            Charges.push({\r\n                days : Math.floor( (ContractnextJuneTimeStamp-ContractTimeStamp)/(1000*60*60*24) ),\r\n                charge : Math.floor( (ContractnextJuneTimeStamp-ContractTimeStamp)/(1000*60*60*24)*(4850/365) ),\r\n                saison : (new Date(ContractnextJuneTimeStamp-(1000*365*60*60*24))).getFullYear()+\"/\"+(new Date(ContractnextJuneTimeStamp)).getFullYear(),\r\n                startingDay: (JSON.stringify(new Date(ContractTimeStamp))).split('\"')[1].split('T')[0],\r\n                To: (JSON.stringify(new Date(ContractnextJuneTimeStamp-(1000*60*60)))).split('\"')[1].split('T')[0]\r\n            })\r\n            Total += Math.floor( (ContractnextJuneTimeStamp-ContractTimeStamp)/(1000*60*60*24)*(4850/365) )\r\n            \r\n            ContractTimeStamp = ContractnextJuneTimeStamp;\r\n            ContractnextJuneTimeStamp += 365*24*60*60*1000;   \r\n        }while(ContractnextJuneTimeStamp <= NextJunFromToDayTimeStamp)\r\n    }\r\n    return({Total,Charges})\r\n\r\n}\r\nconst AllCharges = (ListDesAppartements) => {\r\n    let Appartments = []\r\n    // let ChargesList = []\r\n    let Total = 0\r\n    let today = new Date()\r\n    today.setUTCHours(0, 0, 0, 0);\r\n    let NextJunFromToDayTimeStamp = FindNextJun(today).getTime()\r\n    \r\n    \r\n    if(typeof(ListDesAppartements) !== \"undefined\"){\r\n        \r\n\r\n        ListDesAppartements.map((appartment,i)=>{\r\n            \r\n            let app = {\r\n                titreFoncier : appartment.titreFoncier,\r\n                Immeuble: appartment.Immeuble,\r\n                NAppartement: appartment.NAppartement,\r\n                ChargesList : [],\r\n                Total : 0\r\n            }\r\n            let ContractTimeStamp = appartment.DateDeSignatureDuContrat.toDate().getTime()\r\n            let ContractnextJuneTimeStamp = FindNextJun(appartment.DateDeSignatureDuContrat.toDate()).getTime()\r\n\r\n            \r\n            \r\n            do{\r\n                app[\"ChargesList\"].push({\r\n                    days : Math.floor( (ContractnextJuneTimeStamp-ContractTimeStamp)/(1000*60*60*24) ),\r\n                    charge : Math.floor( (ContractnextJuneTimeStamp-ContractTimeStamp)/(1000*60*60*24)*(4850/365) ),\r\n                    saison : (new Date(ContractnextJuneTimeStamp-(1000*365*60*60*24))).getFullYear()+\"/\"+(new Date(ContractnextJuneTimeStamp)).getFullYear(),\r\n                    startingDay: (JSON.stringify(new Date(ContractTimeStamp))).split('\"')[1].split('T')[0],\r\n                    To: (JSON.stringify(new Date(ContractnextJuneTimeStamp-(1000*60*60)))).split('\"')[1].split('T')[0]\r\n                })\r\n                app[\"Total\"] += Math.floor( (ContractnextJuneTimeStamp-ContractTimeStamp)/(1000*60*60*24)*(4850/365) )\r\n                Total += Math.floor( (ContractnextJuneTimeStamp-ContractTimeStamp)/(1000*60*60*24)*(4850/365) )\r\n\r\n                ContractTimeStamp = ContractnextJuneTimeStamp;\r\n                ContractnextJuneTimeStamp += 365*24*60*60*1000;\r\n\r\n            }while(ContractnextJuneTimeStamp <= NextJunFromToDayTimeStamp)\r\n            \r\n            \r\n            Appartments.push(app)\r\n        })\r\n        \r\n    }\r\n    \r\n    \r\n        \r\n    \r\n    return({Appartments,Total})\r\n\r\n}\r\nexport {AllCharges,AppCharges}"]},"metadata":{},"sourceType":"module"}